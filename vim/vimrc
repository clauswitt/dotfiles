let mapleader = ","
set nocompatible                  " Must come first because it changes other options.
set timeout timeoutlen=1000 ttimeoutlen=100

silent! call pathogen#runtime_append_all_bundles()
call pathogen#infect()
syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.
set pastetoggle=<F2>
set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.



" highlight current line
set cursorline
hi CursorLine cterm=NONE ctermbg=black


set wrap                          " Turn on line wrapping.
set scrolloff=6                   " Show 3 lines of context around the cursor.
set showmatch
set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set noswapfile
set backupskip=/tmp/*,/private/tmp/*
set undodir=~/.vim/undo


" UNCOMMENT TO USE
set tabstop=2                    " Global tab width.
set backspace=2
set shiftwidth=2                 " And again, related.
set smarttab
set expandtab                    " Use spaces instead of tabs
set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

set autoindent " Indent at the same level as previous line
set smartindent

map <Leader>h :hide<cr>

" Make mapping
map <Leader>m :make<cr>

" Fugitive mappings
map <Leader><Leader>ga :Gwrite<cr>
map <Leader><Leader>gc :Gcommit<cr>
map <Leader><Leader>gb :Gblame<cr>
map <Leader><Leader>gr :Gread<cr>
map <Leader><Leader>gp :GitPush<cr>
map <Leader><Leader>gs :Gstatus<cr>

map <Leader>rj :Rjavascript<CR>
map <Leader>rc :Rcontroller<CR>
map <Leader>rm :Rmodel<CR>
map <Leader>rv :Rview<CR>
map <Leader>rs :Rspec<CR>


" CoffeeScript mappings
map <Leader>cc :silent CoffeeCompile<CR>
map <Leader>cl CoffeeLint<CR>

" Phpunit settings
let g:phpunit_testroot = 'Tests'



" Php mappings
map <Leader>pp :!phpunit<CR>
map <Leader>pl :!php -l %<CR>
" Js Mappings
map <Leader>yt :!yeoman test<CR>
map <Leader>yb :!yeoman build<CR>

set list
set listchars=nbsp:¬,tab:>-,extends:»,precedes:«,trail:•

set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="high"
let g:solarized_visibility="high"

colorscheme solarized

highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)



function! SetScreenTitle()
  silent !clear
  let titlestring = "Program: vim | File: " . expand("%") . ""
  let cmd = "!~/Scripts/name.sh \"".titlestring."\""
  silent execute(cmd)
  redraw!
endfunction

autocmd BufEnter * call SetScreenTitle()

autocmd Filetype html setlocal ts=2 sts=2 sw=2
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2
autocmd Filetype coffeescript setlocal ts=2 sts=2 sw=2
autocmd Filetype php setlocal ts=4 sts=4 sw=4
autocmd Filetype gitcommit setlocal spell textwidth=72
au BufRead,BufNewFile *.hbs set filetype=html.handlebars
au BufRead,BufNewFile *.handlebars set filetype=html.handlebars

" Remove trailing whitespace
:nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
:nnoremap <silent> <F6> :let _s=@/<Bar>:%s/\vecho (\$.{-});/if(isset(\1)) echo \1;/g<Bar>:let @/=_s<Bar>:nohl<CR>
" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Easy split navigation remapping splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

map <Tab> <C-w>w


map <Leader><Leader>d :bd<cr>
map <Leader><Leader>c :Bclose<cr>
map <Leader><Leader>bd :bufdo bdelete<cr>
map <Leader>q :cw<cr>


map <Leader>n :cn<cr>
map <Leader>p :cp<cr>

" Clear search highlights
noremap <silent><Leader>/ :nohls<CR>

" Protect your fat fingers from the evils of <F1>
noremap <F1> <Esc>
nnoremap <F3> :NumbersToggle<CR>

" split resizing
:map - <C-W><
:map + <C-W>>

:map <A-j> <C-W>-
:map <A-k> <C-W>+


" remap zz to Z
:map Z zz

" Run a given vim command on the results of fuzzy selecting from a given shell
" command. See usage below.
function! SelectaCommand(choice_command, selecta_args, vim_command)
  try
    silent let selection = system(a:choice_command . " | selecta " . a:selecta_args)
  catch /Vim:Interrupt/
    " Swallow the ^C so that the redraw below happens; otherwise there will be
    " leftovers from selecta on the screen
    redraw!
    return
  endtry
  redraw!
  exec a:vim_command . " " . selection
endfunction

" Find all files in all non-dot directories starting in the working directory.
" Fuzzy select one of those. Open the selected file with :e.
nnoremap <leader>f :call SelectaCommand("ag -l -g \".*\"", "", ":e")<cr>
nnoremap <leader>g :call SelectaCommand("git ls-files", "", ":e")<cr>

function! SelectaIdentifier()
  " Yank the word under the cursor into the z register
  normal "zyiw
  " Fuzzy match files in the current directory, starting with the word under
  " the cursor
  call SelectaCommand("find * -type f", "-s " . @z, ":e")
endfunction
nnoremap <c-g> :call SelectaIdentifier()<cr>

" Rename current file, thanks Gary Bernhardt via Ben Orenstein
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

map <leader>ren :call RenameFile()<cr>

function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%
nmap cp :let @" = expand("%")<cr>

map <leader>gr :topleft :split config/routes.rb<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ARROW KEYS ARE UNACCEPTABLE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SWITCH BETWEEN TEST AND PRODUCTION CODE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenTestAlternate()
  let new_file = AlternateForCurrentFile()
  exec ':e ' . new_file
endfunction
function! AlternateForCurrentFile()
  let current_file = expand("%")
  let new_file = current_file
  let in_spec = match(current_file, '^spec/') != -1
  let going_to_spec = !in_spec
  let in_app = match(current_file, '\<controllers\>') != -1 || match(current_file, '\<models\>') != -1 || match(current_file, '\<views\>') != -1 || match(current_file, '\<helpers\>') != -1
  if going_to_spec
    if in_app
      let new_file = substitute(new_file, '^app/', '', '')
    end
    let new_file = substitute(new_file, '\.rb$', '_spec.rb', '')
    let new_file = 'spec/' . new_file
  else
    let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
    let new_file = substitute(new_file, '^spec/', '', '')
    if in_app
      let new_file = 'app/' . new_file
    end
  endif
  return new_file
endfunction
nnoremap <leader>. :call OpenTestAlternate()<cr>

map ,vs :vs %<cr>
map ,ss :split %<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>t :call RunTestFile()<cr>
map <leader>T :call RunNearestTest()<cr>
map <leader>a :call RunTests('')<cr>
map <leader>c :w\|:!script/features<cr>
map <leader>w :w\|:!script/features --profile wip<cr>

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number . " -b")
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    if match(a:filename, '\.feature$') != -1
        exec ":!script/features " . a:filename
    else
        if filereadable("script/test")
            exec ":!script/test " . a:filename
        elseif filereadable("Gemfile")
            exec ":!bundle exec rspec --color " . a:filename
        else
            exec ":!rspec --color " . a:filename
        end
    end
endfunction

" UltiSnip key bindings
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
imap <c-l> <c-r>=UltiSnips_ListSnippets()<cr>
map <leader>u :UltiSnipsEdit<cr>

" Search Dash for word under cursor
function! SearchDash()
  let s:browser = "/usr/bin/open"
  let s:wordUnderCursor = expand("<cword>")
  let s:currentFileType = &filetype
  let s:url = "dash://".s:currentFileType.":".s:wordUnderCursor
  let s:cmd ="silent ! " . s:browser . " " . s:url
  execute s:cmd
  redraw!
endfunction
map <leader>d :call SearchDash()<CR>
map <leader>r :redraw!<cr>

map <C-E> :call g:Execrus()<CR>
map <C-F> :!open .<cr>
map <C-W> :w<CR>
map <Leader>w :w<CR>
set exrc" enable per-directory .vimrc files
nnoremap <Leader>x :e .exrc<cr>
set secure" disable Usefulnsafe commands in local .vimrc files
nnoremap <F2> <C-]>

map <Leader>erc :e ~/.vimrc<cr>
map <Leader>src :so ~/.vimrc<cr>
map <Leader>j :e ~/Dropbox/notes/journal.md<cr>



" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>


vmap <expr> ++ VMATH_YankAndAnalyse()
nmap ++ vip++

runtime plugin/dragvisuals.vim
vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')
vmap  <expr>  D        DVB_Duplicate()

nmap  ;l   :call ListTrans_toggle_format()<CR>
vmap  ;l   :call ListTrans_toggle_format('visual')<CR>

map <leader>rr :call VimuxRunCommand("irb")<CR>
map <leader>nr :call VimuxRunCommand("node")<cr>

function! VimuxSlime()
  call VimuxSendText(@v)
endfunction

" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <leader><leader>tm "vy :call VimuxSlime()<CR>

" Select current paragraph and send it to tmux
nmap <leader><leader>tm vip<leader><leader>tm<CR>

" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>

" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>

" Close vim tmux runner opened by VimuxRunCommand
map <Leader>vq :VimuxCloseRunner<CR>

" Interrupt any command running in the runner pane
map <Leader>vx :VimuxInterruptRunner<CR>

" Zoom the runner pane (use <bind-key> z to restore runner pane)
map <Leader>vz :call VimuxZoomRunner()<CR>

set shortmess+=I

